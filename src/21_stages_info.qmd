---
format: html
filters:
  - shinylive
---
# Stages Info

View stage information and status for each stage.


:::{.column-screen-inset}
```{shinylive-python}
#| standalone: true
#| layout: horizontal
#| viewerHeight: 800
#| components: [viewer, editor]
from shiny.express import ui, input
from shiny import render, reactive
from wrc_rallydj.livetiming_api import WRCLiveTimingAPIClient

wrc = WRCLiveTimingAPIClient(use_cache=True, backend="memory", expire_after=600)

ui.panel_title("Season calendar")

ui.input_select(
    "season", "Season:", [str(i) for i in range(2024, 2026)], selected="2025"
)

# Create event selector
# Dynamically populated using a list of events
# based on the season selection
ui.input_select("event", "Event:", {})

@reactive.effect
def update_events_select():
    season = season_data()
    if season_data().empty:
        return
    # events = season["EventName"].to_list()
    events = (
        season[["rallyId", "rallyTitle"]].set_index("rallyId")["rallyTitle"].to_dict()
    )
    wrc.setEvent()
    ui.update_select("event", choices=events, selected=wrc.rallyId)

ui.input_select(
    "stage",
    "Stage:",
    {},
)


@reactive.effect
@reactive.event(input.event, input.championship)
def update_stages_select():
    stages_df = stages_data()
    if stages_df.empty:
        ui.update_select("stage", choices={})
    else:
        stages = (
            stages_df[["stageNo", "stageId"]].set_index("stageId")["stageNo"].to_dict()
        )
        ui.update_select("stage", choices=stages)

@reactive.calc
def season_data():
    wrc.initialise(year=int(input.season()))
    # WRC API data fetch
    season = wrc.getResultsCalendar()
    return season


## file: requirements.txt
jupyterlite_simple_cors_proxy
requests-cache
url-normalize
parse

sqlite_utils
pluggy

wrc_rallydj
```